name: Build and Release
on:
 workflow_dispatch:
   
jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        choco install qt5-default cmake qtcreator ninja strawberryperl msys2
        # git clone https://github.com/microsoft/vcpkg
        # ./vcpkg/bootstrap-vcpkg.bat
        
    - name: Install MSYS2 dependencies
      run: |
        C:\msys64\usr\bin\bash.exe -l -i -c "pacman -S --needed --noconfirm \
          mingw-w64-x86_64-autotools \
          mingw-w64-x86_64-cmake \
          mingw-w64-x86_64-glew \
          mingw-w64-x86_64-libarchive \
          mingw-w64-x86_64-make \
          mingw-w64-x86_64-meson \
          mingw-w64-x86_64-python-pip \
          mingw-w64-x86_64-python-psutil \
          mingw-w64-x86_64-toolchain \
          bison \
          flex \
          git \
          nasm \
          p7zip \
          unzip \
          zip"
    - name: Set up environment
      run: |
        echo "C:\msys64\mingw64\bin" >> $GITHUB_PATH
        echo "C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin" >> $GITHUB_PATH
 
    - name: Install Python dependencies
      run: |
        pip install -r requirements.txt
        
    - name: Build
      run: |
        mkdir build
        cd build
        cmake .. -G "Ninja" -DCMAKE_BUILD_TYPE=Release -DRV_DEPS_QT5_LOCATION=C:/Qt/5.15.2/mingw81_64
        cmake --build . --config Release


    - name: Cache build artifacts
      uses: actions/cache@v2
      with:
        path: build
        key: ${{ runner.os }}-build-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-build-
          
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/bin/OpenRV.exe  # Adjust this to the path of your built binary
        asset_name: OpenRV.exe
        asset_content_type: application/octet-stream
